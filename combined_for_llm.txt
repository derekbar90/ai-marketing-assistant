--- Project Metadata ---
Date generated: Sat Aug 31 16:52:47 EDT 2024
Working directory: ./src/partnerschedular
Files processed:


--- File: ./src/partnerschedular/appReducer.js ---
Content:

export const initialState = {
    partners: [],
    schedule: [],
    preferences: {
      contentTypes: ['tweet', 'blog'],
      timeSlots: ['morning', 'afternoon', 'evening'],
    },
    currentMonth: new Date(),
  };
  
  export const appReducer = (state, action) => {
    switch (action.type) {
      case 'ADD_PARTNER':
        console.log("Adding partner:", action.payload); // Debug log
        return { ...state, partners: [...state.partners, action.payload] };
      case 'REMOVE_PARTNER':
        return { ...state, partners: state.partners.filter(partner => partner.id !== action.payload) };
      case 'SET_SCHEDULE':
        console.log("Setting schedule:", action.payload); // Debug log
        return { ...state, schedule: action.payload };
      case 'UPDATE_PREFERENCES':
        return { ...state, preferences: { ...state.preferences, ...action.payload } };
      case 'SET_CURRENT_MONTH':
        return { ...state, currentMonth: action.payload };
      default:
        return state;
    }
  };
--- File: ./src/partnerschedular/ScheduleGenerator.js ---
Content:

import React, { useContext } from 'react';
import { AppContext } from './../App';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Calendar } from 'lucide-react';

export const ScheduleGenerator = ({ onGenerate }) => {
  const { state, dispatch } = useContext(AppContext);

  const handleContentTypeChange = (value) => {
    dispatch({
      type: 'UPDATE_PREFERENCES',
      payload: { contentType: value }
    });
  };

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle>Generate Schedule</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="flex space-x-2 mb-2">
          <Select 
            value={state.preferences.contentType} 
            onValueChange={handleContentTypeChange}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select content type" />
            </SelectTrigger>
            <SelectContent>
              {state.preferences.contentTypes.map(type => (
                <SelectItem key={type} value={type}>{type}</SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button onClick={onGenerate}>
            <Calendar className="mr-2" /> Generate Schedule
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};
--- File: ./src/partnerschedular/index.js ---
Content:

import React, { useReducer, createContext, useEffect, useContext } from 'react';
import { PartnerList } from './PartnerList';
import { ScheduleGenerator } from './ScheduleGenerator';
import { CalendarView } from './CalendarView';
import { appReducer, initialState } from './appReducer';
import { generateSchedule } from './scheduleUtils';
import { resolveConflicts } from './conflictResolution';
import { exportToCSV } from './exportUtils';
import { Button } from './../components/ui/button';

const AppContext = createContext();

export const PartnerSchedulingApp = () => {
  const { state, dispatch } = useContext(AppContext);

  console.log("🧙‍♂️ 🔎 -> ~ PartnerSchedulingApp ~ state:", state)
  console.log("🧙‍♂️ 🔎 -> ~ PartnerSchedulingApp ~ state:", state)
  console.log("🧙‍♂️ 🔎 -> ~ PartnerSchedulingApp ~ state:", state)
  console.log("🧙‍♂️ 🔎 -> ~ PartnerSchedulingApp ~ state:", state)


  useEffect(() => {
    console.log("State updated:", state); // Debug log
  }, [state]);

  const handleGenerateSchedule = () => {
    const newSchedule = generateSchedule(state.partners, state.preferences);
    console.log("New Schedule:", newSchedule);
    const resolvedSchedule = resolveConflicts(newSchedule);
    console.log("Resolved Schedule:", resolvedSchedule);
    dispatch({ type: 'SET_SCHEDULE', payload: resolvedSchedule });
  };
  const handleExport = () => {
    exportToCSV(state.schedule);
  };

  return (
    <AppContext.Provider value={{ state, dispatch }}>
      <div className="p-4 max-w-6xl mx-auto">
        <h1 className="text-2xl font-bold mb-4">Partner Content Scheduling App</h1>
        
        <PartnerList />
        <ScheduleGenerator onGenerate={handleGenerateSchedule} />
        <CalendarView />
        
        <Button 
          onClick={handleExport}
          className="mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Export to CSV
        </Button>
      </div>
    </AppContext.Provider>
  );
};
--- File: ./src/partnerschedular/CalendarView.js ---
Content:

import React, { useContext } from 'react';
import { AppContext } from './../App';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { ChevronLeft, ChevronRight } from 'lucide-react';

export const CalendarView = () => {
  const { state, dispatch } = useContext(AppContext);

  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  const monthNames = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ];

  const getDaysInMonth = (year, month) => new Date(year, month + 1, 0).getDate();

  const currentDate = state.currentMonth;
  const daysInMonth = getDaysInMonth(currentDate.getFullYear(), currentDate.getMonth());
  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();

  const handlePrevMonth = () => {
    const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
    dispatch({ type: 'SET_CURRENT_MONTH', payload: newDate });
  };

  const handleNextMonth = () => {
    const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);
    dispatch({ type: 'SET_CURRENT_MONTH', payload: newDate });
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-center">
          <Button onClick={handlePrevMonth}><ChevronLeft /></Button>
          <CardTitle>{monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}</CardTitle>
          <Button onClick={handleNextMonth}><ChevronRight /></Button>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-7 gap-2">
          {days.map(day => (
            <div key={day} className="text-center font-bold">{day}</div>
          ))}
          {Array.from({ length: firstDayOfMonth }, (_, i) => (
            <div key={`empty-${i}`} className="p-2 border bg-gray-100"></div>
          ))}
          {Array.from({ length: daysInMonth }, (_, i) => {
            const day = i + 1;
            const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
            const event = state.schedule.find(e => new Date(e.date).toDateString() === date.toDateString());
            return (
              <div key={`day-${day}`} className={`p-2 border ${event ? 'bg-blue-100' : ''}`}>
                <div className="text-right">{day}</div>
                {event && (
                  <div className="text-xs mt-1 p-1 rounded" style={{backgroundColor: event.partner.color}}>
                    {event.partner.name} - {event.contentType}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
};
--- File: ./src/partnerschedular/scheduleUtils.js ---
Content:

export const generateSchedule = (partners, preferences) => {
    console.log("Generating schedule with partners:", partners, "and preferences:", preferences); // Debug log
    const schedule = [];
    const startDate = new Date();
    const endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);

    for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
        const partner = selectPartner(partners);
        const contentType = selectContentType(preferences.contentTypes);
        const timeSlot = selectTimeSlot(preferences.timeSlots);

        schedule.push({
            date: new Date(date),
            partner,
            contentType,
            timeSlot
        });
    }

    return schedule;
};

const selectPartner = (partners) => {
    const totalWeight = partners.reduce((sum, partner) => sum + partner.weight, 0);
    let random = Math.random() * totalWeight;

    for (const partner of partners) {
        random -= partner.weight;
        if (random <= 0) {
            return partner;
        }
    }

    return partners[partners.length - 1]; // Fallback
};

const selectContentType = (contentTypes) => {
    return contentTypes[Math.floor(Math.random() * contentTypes.length)];
};

const selectTimeSlot = (timeSlots) => {
    return timeSlots[Math.floor(Math.random() * timeSlots.length)];
};

--- File: ./src/partnerschedular/conflictResolution.js ---
Content:

export const resolveConflicts = (schedule) => {
    const resolvedSchedule = [];
    const usedSlots = new Set();
  
    for (const event of schedule) {
      const slot = `${event.date.toDateString()}-${event.timeSlot}`;
      if (!usedSlots.has(slot)) {
        resolvedSchedule.push(event);
        usedSlots.add(slot);
      } else {
        // Find the next available slot
        const newSlot = findNextAvailableSlot(event, usedSlots);
        resolvedSchedule.push(newSlot);
        usedSlots.add(`${newSlot.date.toDateString()}-${newSlot.timeSlot}`);
      }
    }
  
    return resolvedSchedule;
  };
  
  const findNextAvailableSlot = (event, usedSlots) => {
    const timeSlots = ['morning', 'afternoon', 'evening'];
    let currentDate = new Date(event.date);
    let currentSlotIndex = timeSlots.indexOf(event.timeSlot);
  
    while (true) {
      currentSlotIndex = (currentSlotIndex + 1) % timeSlots.length;
      if (currentSlotIndex === 0) {
        // Move to the next day
        currentDate.setDate(currentDate.getDate() + 1);
      }
  
      const slot = `${currentDate.toDateString()}-${timeSlots[currentSlotIndex]}`;
      if (!usedSlots.has(slot)) {
        return { ...event, date: new Date(currentDate), timeSlot: timeSlots[currentSlotIndex] };
      }
    }
  };
--- File: ./src/partnerschedular/PartnerList.js ---
Content:

import React, { useContext, useState } from 'react';
import { AppContext } from './../App';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Plus, Trash2 } from 'lucide-react';

export const PartnerList = () => {
  const { state, dispatch } = useContext(AppContext);
  const [partnerName, setPartnerName] = useState('');

  const handleAddPartner = () => {
    const newPartner = { id: Date.now(), name: partnerName, weight: 1 };
    console.log("Dispatching ADD_PARTNER with:", newPartner); // Debug log
    dispatch({ type: 'ADD_PARTNER', payload: newPartner });
    setPartnerName('');
    console.log("State after adding partner:", state); // Debug log
  };

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle>Partner List</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="flex space-x-2 mb-2">
          <Input 
            value={partnerName} 
            onChange={(e) => setPartnerName(e.target.value)} 
            placeholder="Enter partner name" 
          />
          <Button onClick={handleAddPartner}>
            <Plus className="mr-2" /> Add Partner
          </Button>
        </div>
        <ul>
          {state.partners.map(partner => (
            <li key={partner.id} className="flex justify-between items-center">
              {partner.name}
              <Button onClick={() => dispatch({ type: 'REMOVE_PARTNER', payload: partner.id })}>
                <Trash2 className="mr-2" /> Remove
              </Button>
            </li>
          ))}
        </ul>
      </CardContent>
    </Card>
  );
};
--- File: ./src/partnerschedular/exportUtils.js ---
Content:

export const exportToCSV = (schedule) => {
    const headers = ['Date', 'Partner', 'Content Type', 'Time Slot'];
    const csvContent = [
      headers.join(','),
      ...schedule.map(event => [
        event.date.toDateString(),
        event.partner.name,
        event.contentType,
        event.timeSlot
      ].join(','))
    ].join('\n');
  
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', 'schedule.csv');
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };
--- File: ./src/partnerschedular/dateUtils.js ---
Content:

export const getDaysInMonth = (year, month) => {
    return new Date(year, month + 1, 0).getDate();
  };
  
  export const getFirstDayOfMonth = (year, month) => {
    return new Date(year, month, 1).getDay();
  };
  
  export const formatDate = (date) => {
    const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };
    return date.toLocaleDateString('en-US', options);
  };
  
  export const addDays = (date, days) => {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
  };
  
  export const isSameDay = (date1, date2) => {
    return date1.getFullYear() === date2.getFullYear() &&
           date1.getMonth() === date2.getMonth() &&
           date1.getDate() === date2.getDate();
  };