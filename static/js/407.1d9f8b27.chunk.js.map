{"version":3,"file":"static/js/407.1d9f8b27.chunk.js","mappings":"+SAAAA,EAAAA,EAAAA,KAOO,IAAMC,EAAA,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAGX,SAAAA,EAAYK,GAAiB,IAAAC,EAM7B,OAN6BC,EAAAA,EAAAA,GAAA,KAAAP,IAC3BM,EAAAH,EAAAK,KAAA,KAAMH,IACDI,QAAeC,EAAAA,QAAQL,GACpBM,EAAAA,WAAgBD,EAAAA,KAAKJ,EAAKG,WAC7BE,EAAAA,UAAUL,EAAKG,SAEtBH,CAAA,CA4BF,OA1BEM,EAAAA,EAAAA,GAAAZ,EAAA,EAAAa,IAAA,iBAAAC,MAAA,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,EAAqBd,GAAA,IAAAe,EAAA,YAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,UAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEdrB,GAAA,IACHsB,OAAA,GAAAC,QAAAC,EAAAA,EAAAA,GACMxB,EAAKsB,QAAU,IAAC,CACnB,SAAAG,GACC,IAAMC,EAASD,EAAIE,GAAGC,YAAYC,OAClCJ,EAAIE,GAAGG,MAAMC,EAAAA,GACbN,EAAIE,GAAGK,MAAMN,EAAQ,CAAEO,KAAMlB,EAAKX,SAAW2B,EAAAA,EAC/C,OAEJ,wBAAAd,EAAAiB,OAAA,GAAApB,EAAA,KAIF,gBAAAqB,GAAA,OAAAzB,EAAA0B,MAAA,KAAAC,UAAA,EAfA,IAeA,CAAA7B,IAAA,UAAAC,MAAA,eAAA6B,GAAA3B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA0B,EACEvC,EACAwC,EACAf,GAAA,OAAAb,EAAAA,EAAAA,KAAAI,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAArB,OAAA,UAEOsB,EAAAA,EAAAA,GAAQ1C,EAAKwC,EAAQf,IAC9B,wBAAAgB,EAAAP,OAAA,GAAAK,EAAA,KAEA,gBAAAI,EAAAC,EAAAC,GAAA,OAAAP,EAAAF,MAAA,KAAAC,UAAA,EARA,IAQA,CAAA7B,IAAA,QAAAC,MAAA,eAAAqC,GAAAnC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAkC,EAAY/C,GAAA,OAAAY,EAAAA,EAAAA,KAAAI,MAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OACVnB,EAAGiD,OACL,wBAAAD,EAAAd,OAAA,GAAAa,EAAA,KACF,gBAAAG,GAAA,OAAAJ,EAAAV,MAAA,KAAAC,UAAA,EAHE,MAGF1C,CAAA,CArCa,CAAewD,EAAAA,E","sources":["../node_modules/@electric-sql/pglite/src/fs/nodefs.ts"],"sourcesContent":["import * as fs from 'fs'\nimport * as path from 'path'\nimport { FilesystemBase } from './types.js'\nimport { PGDATA } from './index.js'\nimport type { PostgresMod, FS } from '../postgresMod.js'\nimport { dumpTar, type DumpTarCompressionOptions } from './tarUtils.js'\n\nexport class NodeFS extends FilesystemBase {\n  protected rootDir: string\n\n  constructor(dataDir: string) {\n    super(dataDir)\n    this.rootDir = path.resolve(dataDir)\n    if (!fs.existsSync(path.join(this.rootDir))) {\n      fs.mkdirSync(this.rootDir)\n    }\n  }\n\n  async emscriptenOpts(opts: Partial<PostgresMod>) {\n    const options: Partial<PostgresMod> = {\n      ...opts,\n      preRun: [\n        ...(opts.preRun || []),\n        (mod: any) => {\n          const nodefs = mod.FS.filesystems.NODEFS\n          mod.FS.mkdir(PGDATA)\n          mod.FS.mount(nodefs, { root: this.rootDir }, PGDATA)\n        },\n      ],\n    }\n    return options\n  }\n\n  async dumpTar(\n    mod: FS,\n    dbname: string,\n    compression?: DumpTarCompressionOptions,\n  ) {\n    return dumpTar(mod, dbname, compression)\n  }\n\n  async close(FS: FS): Promise<void> {\n    FS.quit()\n  }\n}\n"],"names":["p","a","_n","_inherits","_super","_createSuper","r","_this","_classCallCheck","call","rootDir","t","o","_createClass","key","value","_emscriptenOpts","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","wrap","_context","prev","next","abrupt","_objectSpread","preRun","concat","_toConsumableArray","s","c","FS","filesystems","NODEFS","mkdir","i","mount","root","stop","_x","apply","arguments","_dumpTar","_callee2","e","_context2","m","_x2","_x3","_x4","_close","_callee3","_context3","quit","_x5","n"],"sourceRoot":""}