{"version":3,"file":"static/js/483.afd6e2ce.chunk.js","mappings":"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","sources":["../node_modules/@electric-sql/pglite/src/fs/opfs-ahp/index.ts","../node_modules/@electric-sql/pglite/src/fs/opfs-ahp/emscriptenFs.ts","../node_modules/@electric-sql/pglite/src/fs/opfs-ahp/types.ts","../node_modules/@electric-sql/pglite/src/fs/opfs-ahp/opfsAhp.ts"],"sourcesContent":["import { FilesystemBase } from '../types.js'\nimport { PGDATA } from '../index.js'\nimport type { PostgresMod, FS } from '../../postgresMod.js'\nimport { createOPFSAHP } from './emscriptenFs.js'\nimport { OpfsAhp } from './opfsAhp.js'\nimport { dumpTar, type DumpTarCompressionOptions } from '../tarUtils.js'\n\nexport interface OpfsAhpFSOptions {\n  initialPoolSize?: number\n  maintainedPoolSize?: number\n}\n\n/**\n * PGlite OPFS access handle pool filesystem.\n * Opens a pool of sync access handles and then allocates them as needed.\n */\nexport class OpfsAhpFS extends FilesystemBase {\n  #initialPoolSize: number\n  #maintainedPoolSize: number\n  opfsAhp?: OpfsAhp\n\n  constructor(\n    dataDir: string,\n    { initialPoolSize, maintainedPoolSize }: OpfsAhpFSOptions = {},\n  ) {\n    super(dataDir)\n    this.#initialPoolSize = initialPoolSize ?? 1000\n    this.#maintainedPoolSize = maintainedPoolSize ?? 100\n  }\n\n  async emscriptenOpts(opts: Partial<PostgresMod>) {\n    this.opfsAhp = await OpfsAhp.create({\n      root: this.dataDir!,\n      initialPoolSize: this.#initialPoolSize,\n      maintainedPoolSize: this.#maintainedPoolSize,\n    })\n    const options: Partial<PostgresMod> = {\n      ...opts,\n      preRun: [\n        ...(opts.preRun || []),\n        (mod: PostgresMod) => {\n          const OPFS = createOPFSAHP(mod, this.opfsAhp!)\n          mod.FS.mkdir(PGDATA)\n          mod.FS.mount(OPFS, {}, PGDATA)\n        },\n      ],\n    }\n    return options\n  }\n\n  async syncToFs(_fs: FS, relaxedDurability = false) {\n    await this.opfsAhp?.maybeCheckpointState()\n    await this.opfsAhp?.maintainPool()\n    // console.log(\"syncToFs\", relaxedDurability);\n    if (!relaxedDurability) {\n      this.opfsAhp?.flush()\n    }\n  }\n\n  async dumpTar(\n    mod: FS,\n    dbname: string,\n    compression?: DumpTarCompressionOptions,\n  ) {\n    return dumpTar(mod, dbname, compression)\n  }\n\n  async close(FS: FS): Promise<void> {\n    this.opfsAhp?.exit()\n    FS.quit()\n  }\n}\n","import type { PostgresMod } from '../../postgresMod.js'\nimport type { OpfsAhp } from './opfsAhp.js'\nimport { ERRNO_CODES } from './types.js'\n\nexport type FileSystemType = Emscripten.FileSystemType & {\n  createNode: (\n    parent: FSNode | null,\n    name: string,\n    mode: number,\n    dev?: any,\n  ) => FSNode\n  node_ops: FS.NodeOps\n  stream_ops: FS.StreamOps & {\n    dup: (stream: FSStream) => void\n    mmap: (\n      stream: FSStream,\n      length: number,\n      position: number,\n      prot: any,\n      flags: any,\n    ) => { ptr: number; allocated: boolean }\n    msync: (\n      stream: FSStream,\n      buffer: Uint8Array,\n      offset: number,\n      length: number,\n      mmapFlags: any,\n    ) => number\n  }\n} & { [key: string]: any }\n\ntype FSNode = FS.FSNode & {\n  node_ops: FS.NodeOps\n  stream_ops: FS.StreamOps\n}\n\ntype FSStream = FS.FSStream & {\n  node: FSNode\n  shared: {\n    refcount: number\n  }\n}\n\nexport interface OpfsMount extends FS.Mount {\n  opts: {\n    root: string\n  }\n}\n\ntype OpfsNode = FSNode\n\ntype EmscriptenFS = PostgresMod['FS'] & {\n  createNode: (\n    parent: FSNode | null,\n    name: string,\n    mode: number,\n    dev?: any,\n  ) => FSNode\n}\n\n/**\n * Create an emscripten filesystem that uses the AHP filesystem.\n * @param Module The emscripten module\n * @param opfsAhp The AHP filesystem - see `OpfsAhp.ts`\n * @returns The emscripten filesystem\n */\nexport const createOPFSAHP = (Module: PostgresMod, opfsAhp: OpfsAhp) => {\n  const FS = Module.FS as EmscriptenFS\n  const OPFS = {\n    tryFSOperation<T>(f: () => T): T {\n      try {\n        return f()\n      } catch (e: any) {\n        if (!e.code) throw e\n        if (e.code === 'UNKNOWN') throw new FS.ErrnoError(ERRNO_CODES.EINVAL)\n        throw new FS.ErrnoError(e.code)\n      }\n    },\n    mount(_mount: OpfsMount): FSNode {\n      return OPFS.createNode(null, '/', 16384 | 511, 0)\n    },\n    syncfs(\n      _mount: FS.Mount,\n      _populate: any, // This has the wrong type in @types/emscripten\n      _done: (err?: number | null) => unknown,\n    ): void {\n      // noop\n    },\n    createNode(\n      parent: FSNode | null,\n      name: string,\n      mode: number,\n      _dev?: any,\n    ): OpfsNode {\n      if (!FS.isDir(mode) && !FS.isFile(mode)) {\n        throw new FS.ErrnoError(28)\n      }\n      const node = FS.createNode(parent, name, mode)\n      node.node_ops = OPFS.node_ops\n      node.stream_ops = OPFS.stream_ops\n      return node\n    },\n    getMode: function (path: string): number {\n      log('getMode', path)\n      return OPFS.tryFSOperation(() => {\n        const stats = opfsAhp.lstat(path)\n        return stats.mode\n      })\n    },\n    realPath: function (node: FSNode): string {\n      const parts: string[] = []\n      while (node.parent !== node) {\n        parts.push(node.name)\n        node = node.parent as FSNode\n      }\n      parts.push((node.mount as OpfsMount).opts.root)\n      parts.reverse()\n      return parts.join('/')\n    },\n    node_ops: {\n      getattr(node: OpfsNode): FS.Stats {\n        log('getattr', OPFS.realPath(node))\n        const path = OPFS.realPath(node)\n        return OPFS.tryFSOperation(() => {\n          const stats = opfsAhp.lstat(path)\n          return {\n            ...stats,\n            dev: 0,\n            ino: node.id,\n            nlink: 1,\n            rdev: node.rdev,\n            atime: new Date(stats.atime),\n            mtime: new Date(stats.mtime),\n            ctime: new Date(stats.ctime),\n          }\n        })\n      },\n      setattr(node: OpfsNode, attr: FS.Stats): void {\n        log('setattr', OPFS.realPath(node), attr)\n        const path = OPFS.realPath(node)\n        OPFS.tryFSOperation(() => {\n          if (attr.mode !== undefined) {\n            opfsAhp.chmod(path, attr.mode)\n          }\n          if (attr.size !== undefined) {\n            opfsAhp.truncate(path, attr.size)\n          }\n          if (attr.timestamp !== undefined) {\n            opfsAhp.utimes(path, attr.timestamp, attr.timestamp)\n          }\n          if (attr.size !== undefined) {\n            opfsAhp.truncate(path, attr.size)\n          }\n        })\n      },\n      lookup(parent: FSNode, name: string): OpfsNode {\n        log('lookup', OPFS.realPath(parent), name)\n        const path = [OPFS.realPath(parent), name].join('/')\n        const mode = OPFS.getMode(path)\n        return OPFS.createNode(parent, name, mode)\n      },\n      mknod(\n        parent: FSNode,\n        name: string,\n        mode: number,\n        dev: unknown,\n      ): OpfsNode {\n        log('mknod', OPFS.realPath(parent), name, mode, dev)\n        const node = OPFS.createNode(parent, name, mode, dev)\n        // create the backing node for this in the fs root as well\n        const path = OPFS.realPath(node)\n        return OPFS.tryFSOperation(() => {\n          if (FS.isDir(node.mode)) {\n            opfsAhp.mkdir(path, { mode })\n          } else {\n            opfsAhp.writeFile(path, '', { mode })\n          }\n          return node\n        })\n      },\n      rename(oldNode: OpfsNode, newDir: OpfsNode, newName: string): void {\n        log('rename', OPFS.realPath(oldNode), OPFS.realPath(newDir), newName)\n        const oldPath = OPFS.realPath(oldNode)\n        const newPath = [OPFS.realPath(newDir), newName].join('/')\n        OPFS.tryFSOperation(() => {\n          opfsAhp.rename(oldPath, newPath)\n        })\n        oldNode.name = newName\n      },\n      unlink(parent: OpfsNode, name: string): void {\n        log('unlink', OPFS.realPath(parent), name)\n        const path = [OPFS.realPath(parent), name].join('/')\n        try {\n          opfsAhp.unlink(path)\n        } catch (e: any) {\n          // no-op\n        }\n      },\n      rmdir(parent: OpfsNode, name: string): void {\n        log('rmdir', OPFS.realPath(parent), name)\n        const path = [OPFS.realPath(parent), name].join('/')\n        return OPFS.tryFSOperation(() => {\n          opfsAhp.rmdir(path)\n        })\n      },\n      readdir(node: OpfsNode): string[] {\n        log('readdir', OPFS.realPath(node))\n        const path = OPFS.realPath(node)\n        return OPFS.tryFSOperation(() => {\n          return opfsAhp.readdir(path)\n        })\n      },\n      symlink(parent: FSNode, newName: string, oldPath: string): void {\n        log('symlink', OPFS.realPath(parent), newName, oldPath)\n        // This is not supported by OPFS\n        throw new FS.ErrnoError(63)\n      },\n      readlink(node: FSNode): string {\n        log('readlink', OPFS.realPath(node))\n        // This is not supported by OPFS\n        throw new FS.ErrnoError(63)\n      },\n    },\n    stream_ops: {\n      open(stream: FSStream): void {\n        log('open stream', OPFS.realPath(stream.node))\n        const path = OPFS.realPath(stream.node)\n        return OPFS.tryFSOperation(() => {\n          if (FS.isFile(stream.node.mode)) {\n            stream.shared.refcount = 1\n            stream.nfd = opfsAhp.open(path)\n          }\n        })\n      },\n      close(stream: FSStream): void {\n        log('close stream', OPFS.realPath(stream.node))\n        return OPFS.tryFSOperation(() => {\n          if (\n            FS.isFile(stream.node.mode) &&\n            stream.nfd &&\n            --stream.shared.refcount === 0\n          ) {\n            opfsAhp.close(stream.nfd)\n          }\n        })\n      },\n      dup(stream: FSStream) {\n        log('dup stream', OPFS.realPath(stream.node))\n        stream.shared.refcount++\n      },\n      read(\n        stream: FSStream, // Stream to read from\n        buffer: Uint8Array, // Buffer to read into - Wrong type in @types/emscripten\n        offset: number, // Offset in buffer to start writing to\n        length: number, // Number of bytes to read\n        position: number, // Position in file to read from\n      ): number {\n        log('read stream', OPFS.realPath(stream.node), offset, length, position)\n        if (length === 0) return 0\n        const ret = OPFS.tryFSOperation(() =>\n          opfsAhp.read(\n            stream.nfd!,\n            buffer as unknown as Int8Array,\n            offset,\n            length,\n            position,\n          ),\n        )\n        return ret\n      },\n      write(\n        stream: FSStream, // Stream to write to\n        buffer: Uint8Array, // Buffer to read from - Wrong type in @types/emscripten\n        offset: number, // Offset in buffer to start writing from\n        length: number, // Number of bytes to write\n        position: number, // Position in file to write to\n      ): number {\n        log(\n          'write stream',\n          OPFS.realPath(stream.node),\n          offset,\n          length,\n          position,\n        )\n        return OPFS.tryFSOperation(() =>\n          opfsAhp.write(\n            stream.nfd!,\n            buffer.buffer as unknown as Int8Array,\n            offset,\n            length,\n            position,\n          ),\n        )\n      },\n      llseek(stream: FSStream, offset: number, whence: number): number {\n        log('llseek stream', OPFS.realPath(stream.node), offset, whence)\n        let position = offset\n        if (whence === 1) {\n          position += stream.position\n        } else if (whence === 2) {\n          if (FS.isFile(stream.node.mode)) {\n            OPFS.tryFSOperation(() => {\n              const stat = opfsAhp.fstat(stream.nfd!)\n              position += stat.size\n            })\n          }\n        }\n        if (position < 0) {\n          throw new FS.ErrnoError(28)\n        }\n        return position\n      },\n      mmap(\n        stream: FSStream,\n        length: number,\n        position: number,\n        prot: any,\n        flags: any,\n      ) {\n        log(\n          'mmap stream',\n          OPFS.realPath(stream.node),\n          length,\n          position,\n          prot,\n          flags,\n        )\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.ENODEV)\n        }\n\n        const ptr = (Module as any).mmapAlloc(length) // TODO: Fix type and check this is exported\n\n        OPFS.stream_ops.read(\n          stream,\n          Module.HEAP8 as unknown as Uint8Array,\n          ptr,\n          length,\n          position,\n        )\n        return { ptr, allocated: true }\n      },\n      msync(\n        stream: FSStream,\n        buffer: Uint8Array,\n        offset: number,\n        length: number,\n        mmapFlags: any,\n      ) {\n        log(\n          'msync stream',\n          OPFS.realPath(stream.node),\n          offset,\n          length,\n          mmapFlags,\n        )\n        OPFS.stream_ops.write(stream, buffer, 0, length, offset)\n        return 0\n      },\n    },\n  } satisfies FileSystemType\n  return OPFS\n}\n\nfunction log(..._args: any[]) {\n  // console.log(...args);\n}\n","export type FsStats = {\n  dev: number\n  ino: number\n  mode: number\n  nlink: number\n  uid: number\n  gid: number\n  rdev: number\n  size: number\n  blksize: number\n  blocks: number\n  atime: number\n  mtime: number\n  ctime: number\n}\n\n// TypeScript doesn't have a built-in type for FileSystemSyncAccessHandle\nexport interface FileSystemSyncAccessHandle {\n  close(): void\n  flush(): void\n  getSize(): number\n  read(buffer: ArrayBuffer, options: { at: number }): number\n  truncate(newSize: number): void\n  write(buffer: ArrayBuffer, options: { at: number }): number\n}\n\nexport const ERRNO_CODES = {\n  EBADF: 8,\n  EBADFD: 127,\n  EEXIST: 20,\n  EINVAL: 28,\n  EISDIR: 31,\n  ENODEV: 43,\n  ENOENT: 44,\n  ENOTDIR: 54,\n  ENOTEMPTY: 55,\n} as const\n\nexport class FsError extends Error {\n  code?: number\n  constructor(code: number | keyof typeof ERRNO_CODES | null, message: string) {\n    super(message)\n    if (typeof code === 'number') {\n      this.code = code\n    } else if (typeof code === 'string') {\n      this.code = ERRNO_CODES[code]\n    }\n  }\n}\n\n// State\n\nexport interface State {\n  root: DirectoryNode\n  pool: PoolFilenames\n}\n\nexport type PoolFilenames = Array<string>\n\n// WAL\n\nexport interface WALEntry {\n  opp: string\n  args: any[]\n}\n\n// Node tree\n\nexport type NodeType = 'file' | 'directory'\n\ninterface BaseNode {\n  type: NodeType\n  lastModified: number\n  mode: number\n}\n\nexport interface FileNode extends BaseNode {\n  type: 'file'\n  backingFilename: string\n}\n\nexport interface DirectoryNode extends BaseNode {\n  type: 'directory'\n  children: { [filename: string]: Node }\n}\n\nexport type Node = FileNode | DirectoryNode\n","import { FsError } from './types.js'\nimport type {\n  FsStats,\n  State,\n  FileSystemSyncAccessHandle,\n  Node,\n  FileNode,\n  DirectoryNode,\n  WALEntry,\n} from './types.js'\n\nconst STATE_FILE = 'state.txt'\nconst DATA_DIR = 'data'\nconst INITIAL_MODE = {\n  DIR: 16384,\n  FILE: 32768,\n}\n\nexport interface OpfsAhpOptions {\n  root: string\n  initialPoolSize?: number\n  maintainedPoolSize?: number\n}\n\n/**\n * An OPFS Access Handle Pool VFS that exports a Node.js-like FS interface.\n * This FS is then wrapped by an Emscripten FS interface in emscriptenFs.ts.\n */\nexport class OpfsAhp {\n  readyPromise: Promise<void>\n  #ready = false\n\n  readonly root: string\n  readonly initialPoolSize: number\n  readonly maintainedPoolSize: number\n\n  #opfsRootAh!: FileSystemDirectoryHandle\n  #rootAh!: FileSystemDirectoryHandle\n  #dataDirAh!: FileSystemDirectoryHandle\n\n  #stateFH!: FileSystemFileHandle\n  #stateSH!: FileSystemSyncAccessHandle\n\n  #fh: Map<string, FileSystemFileHandle> = new Map()\n  #sh: Map<string, FileSystemSyncAccessHandle> = new Map()\n\n  #handleIdCounter = 0\n  #openHandlePaths: Map<number, string> = new Map()\n  #openHandleIds: Map<string, number> = new Map()\n\n  state!: State\n  lastCheckpoint = 0\n  checkpointInterval = 1000 * 60 // 1 minute\n  poolCounter = 0\n\n  #unsyncedSH = new Set<FileSystemSyncAccessHandle>()\n\n  constructor({ root, initialPoolSize, maintainedPoolSize }: OpfsAhpOptions) {\n    this.root = root\n    this.initialPoolSize = initialPoolSize || 1000\n    this.maintainedPoolSize = maintainedPoolSize || 100\n    this.readyPromise = this.#init()\n  }\n\n  static async create(options: OpfsAhpOptions) {\n    const instance = new OpfsAhp(options)\n    await instance.readyPromise\n    return instance\n  }\n\n  async #init() {\n    this.#opfsRootAh = await navigator.storage.getDirectory()\n    this.#rootAh = await this.#resolveOpfsDirectory(this.root, {\n      create: true,\n    })\n    this.#dataDirAh = await this.#resolveOpfsDirectory(DATA_DIR, {\n      from: this.#rootAh,\n      create: true,\n    })\n\n    this.#stateFH = await this.#rootAh.getFileHandle(STATE_FILE, {\n      create: true,\n    })\n    this.#stateSH = await (this.#stateFH as any).createSyncAccessHandle()\n\n    const stateAB = new ArrayBuffer(this.#stateSH.getSize())\n    this.#stateSH.read(stateAB, { at: 0 })\n    let state: State\n    const stateLines = new TextDecoder().decode(stateAB).split('\\n')\n    // Line 1 is a base state object.\n    // Lines 1+n are WAL entries.\n\n    let isNewState = false\n    try {\n      state = JSON.parse(stateLines[0])\n    } catch (e) {\n      state = {\n        root: {\n          type: 'directory',\n          lastModified: Date.now(),\n          mode: INITIAL_MODE.DIR,\n          children: {},\n        },\n        pool: [],\n      }\n      // write new state to file\n      this.#stateSH.truncate(0)\n      this.#stateSH.write(new TextEncoder().encode(JSON.stringify(state)), {\n        at: 0,\n      })\n      isNewState = true\n    }\n    this.state = state\n\n    // Apply WAL entries\n    const wal = stateLines\n      .slice(1)\n      .filter(Boolean)\n      .map((line) => JSON.parse(line))\n    for (const entry of wal) {\n      const methodName = `_${entry.opp}State`\n      if (typeof this[methodName as keyof this] === 'function') {\n        try {\n          const method = this[methodName as keyof this] as any\n          method.bind(this)(...entry.args)\n        } catch (e) {\n          console.warn('Error applying OPFS AHP WAL entry', entry, e)\n        }\n      }\n    }\n\n    // Open all file handles for dir tree\n    const walkPromises: Promise<void>[] = []\n    const walk = async (node: Node) => {\n      if (node.type === 'file') {\n        try {\n          const fh = await this.#dataDirAh.getFileHandle(node.backingFilename)\n          const sh: FileSystemSyncAccessHandle = await (\n            fh as any\n          ).createSyncAccessHandle()\n          this.#fh.set(node.backingFilename, fh)\n\n          this.#sh.set(node.backingFilename, sh)\n        } catch (e) {\n          console.error('Error opening file handle for node', node, e)\n        }\n      } else {\n        for (const child of Object.values(node.children)) {\n          walkPromises.push(walk(child))\n        }\n      }\n    }\n    await walk(this.state.root)\n\n    // Open all pool file handles\n    const poolPromises: Promise<void>[] = []\n    for (const filename of this.state.pool) {\n      poolPromises.push(\n        // eslint-disable-next-line no-async-promise-executor\n        new Promise<void>(async (resolve) => {\n          if (this.#fh.has(filename)) {\n            console.warn('File handle already exists for pool file', filename)\n          }\n          const fh = await this.#dataDirAh.getFileHandle(filename)\n          const sh: FileSystemSyncAccessHandle = await (\n            fh as any\n          ).createSyncAccessHandle()\n          this.#fh.set(filename, fh)\n          this.#sh.set(filename, sh)\n          resolve()\n        }),\n      )\n    }\n\n    await Promise.all([...walkPromises, ...poolPromises])\n\n    await this.maintainPool(\n      isNewState ? this.initialPoolSize : this.maintainedPoolSize,\n    )\n\n    this.#ready = true\n  }\n\n  get ready() {\n    return this.#ready\n  }\n\n  async maintainPool(size?: number) {\n    size = size || this.maintainedPoolSize\n    const change = size - this.state.pool.length\n    const promises: Promise<void>[] = []\n    for (let i = 0; i < change; i++) {\n      promises.push(\n        // eslint-disable-next-line no-async-promise-executor\n        new Promise<void>(async (resolve) => {\n          ++this.poolCounter\n          const filename = `${(Date.now() - 1704063600).toString(16).padStart(8, '0')}-${this.poolCounter.toString(16).padStart(8, '0')}`\n          const fh = await this.#dataDirAh.getFileHandle(filename, {\n            create: true,\n          })\n          const sh: FileSystemSyncAccessHandle = await (\n            fh as any\n          ).createSyncAccessHandle()\n          this.#fh.set(filename, fh)\n          this.#sh.set(filename, sh)\n          this.#logWAL({\n            opp: 'createPoolFile',\n            args: [filename],\n          })\n          this.state.pool.push(filename)\n          resolve()\n        }),\n      )\n    }\n    for (let i = 0; i > change; i--) {\n      promises.push(\n        // eslint-disable-next-line no-async-promise-executor\n        new Promise<void>(async (resolve) => {\n          const filename = this.state.pool.pop()!\n          this.#logWAL({\n            opp: 'deletePoolFile',\n            args: [filename],\n          })\n          const fh = this.#fh.get(filename)!\n          const sh = this.#sh.get(filename)\n          sh?.close()\n          // @ts-ignore outdated type? need to check\n          await fh.remove().then(() => {\n            this.#fh.delete(filename)\n            this.#sh.delete(filename)\n            resolve()\n          })\n        }),\n      )\n    }\n    await Promise.all(promises)\n  }\n\n  _createPoolFileState(filename: string) {\n    this.state.pool.push(filename)\n  }\n\n  _deletePoolFileState(filename: string) {\n    const index = this.state.pool.indexOf(filename)\n    if (index > -1) {\n      this.state.pool.splice(index, 1)\n    }\n  }\n\n  async maybeCheckpointState() {\n    if (Date.now() - this.lastCheckpoint > this.checkpointInterval) {\n      await this.checkpointState()\n    }\n  }\n\n  async checkpointState() {\n    const stateAB = new TextEncoder().encode(JSON.stringify(this.state))\n    this.#stateSH.truncate(0)\n    this.#stateSH.write(stateAB, { at: 0 })\n    this.#stateSH.flush()\n    this.lastCheckpoint = Date.now()\n  }\n\n  flush() {\n    for (const sh of this.#unsyncedSH) {\n      try {\n        sh.flush()\n      } catch (e) {\n        // The file may have been closed if it was deleted\n      }\n    }\n    this.#unsyncedSH.clear()\n  }\n\n  exit(): void {\n    for (const sh of this.#sh.values()) {\n      sh.close()\n    }\n    this.#stateSH.flush()\n    this.#stateSH.close()\n  }\n\n  // Filesystem API:\n\n  chmod(path: string, mode: number): void {\n    this.#tryWithWAL({ opp: 'chmod', args: [path, mode] }, () => {\n      this._chmodState(path, mode)\n    })\n  }\n\n  _chmodState(path: string, mode: number): void {\n    const node = this.#resolvePath(path)\n    node.mode = mode\n  }\n\n  close(fd: number): void {\n    const path = this.#getPathFromFd(fd)\n    this.#openHandlePaths.delete(fd)\n    this.#openHandleIds.delete(path)\n  }\n\n  fstat(fd: number): FsStats {\n    const path = this.#getPathFromFd(fd)\n    return this.lstat(path)\n  }\n\n  lstat(path: string): FsStats {\n    const node = this.#resolvePath(path)\n    const size =\n      node.type === 'file' ? this.#sh.get(node.backingFilename)!.getSize() : 0\n    const blksize = 4096\n    return {\n      dev: 0,\n      ino: 0,\n      mode: node.mode,\n      nlink: 1,\n      uid: 0,\n      gid: 0,\n      rdev: 0,\n      size,\n      blksize,\n      blocks: Math.ceil(size / blksize),\n      atime: node.lastModified,\n      mtime: node.lastModified,\n      ctime: node.lastModified,\n    }\n  }\n\n  mkdir(path: string, options?: { recursive?: boolean; mode?: number }): void {\n    this.#tryWithWAL({ opp: 'mkdir', args: [path, options] }, () => {\n      this._mkdirState(path, options)\n    })\n  }\n\n  _mkdirState(\n    path: string,\n    options?: { recursive?: boolean; mode?: number },\n  ): void {\n    const parts = this.#pathParts(path)\n    const newDirName = parts.pop()!\n    const currentPath: string[] = []\n    let node = this.state.root\n    for (const part of parts) {\n      currentPath.push(path)\n      if (!Object.prototype.hasOwnProperty.call(node.children, part)) {\n        if (options?.recursive) {\n          this.mkdir(currentPath.join('/'))\n        } else {\n          throw new FsError('ENOENT', 'No such file or directory')\n        }\n      }\n      if (node.children[part].type !== 'directory') {\n        throw new FsError('ENOTDIR', 'Not a directory')\n      }\n      node = node.children[part] as DirectoryNode\n    }\n    if (Object.prototype.hasOwnProperty.call(node.children, newDirName)) {\n      throw new FsError('EEXIST', 'File exists')\n    }\n    const newDir: DirectoryNode = {\n      type: 'directory',\n      lastModified: Date.now(),\n      mode: options?.mode || INITIAL_MODE.DIR,\n      children: {},\n    }\n    node.children[newDirName] = newDir\n  }\n\n  open(path: string, _flags?: string, _mode?: number): number {\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const handleId = this.#nextHandleId()\n    this.#openHandlePaths.set(handleId, path)\n    this.#openHandleIds.set(path, handleId)\n    return handleId\n  }\n\n  readdir(path: string): string[] {\n    const node = this.#resolvePath(path)\n    if (node.type !== 'directory') {\n      throw new FsError('ENOTDIR', 'Not a directory')\n    }\n    return Object.keys(node.children)\n  }\n\n  read(\n    fd: number,\n    buffer: Int8Array, // Buffer to read into\n    offset: number, // Offset in buffer to start writing to\n    length: number, // Number of bytes to read\n    position: number, // Position in file to read from\n  ): number {\n    const path = this.#getPathFromFd(fd)\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const sh = this.#sh.get(node.backingFilename)!\n    return sh.read(new Int8Array(buffer.buffer, offset, length), {\n      at: position,\n    })\n  }\n\n  rename(oldPath: string, newPath: string): void {\n    this.#tryWithWAL({ opp: 'rename', args: [oldPath, newPath] }, () => {\n      this._renameState(oldPath, newPath, true)\n    })\n  }\n\n  _renameState(oldPath: string, newPath: string, doFileOps = false): void {\n    const oldPathParts = this.#pathParts(oldPath)\n    const oldFilename = oldPathParts.pop()!\n    const oldParent = this.#resolvePath(oldPathParts.join('/')) as DirectoryNode\n    if (\n      !Object.prototype.hasOwnProperty.call(oldParent.children, oldFilename)\n    ) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    const newPathParts = this.#pathParts(newPath)\n    const newFilename = newPathParts.pop()!\n    const newParent = this.#resolvePath(newPathParts.join('/')) as DirectoryNode\n    if (\n      doFileOps &&\n      Object.prototype.hasOwnProperty.call(newParent.children, newFilename)\n    ) {\n      // Overwrite, so return the underlying file to the pool\n      const node = newParent.children[newFilename]! as FileNode\n      const sh = this.#sh.get(node.backingFilename)!\n      sh.truncate(0)\n      this.state.pool.push(node.backingFilename)\n    }\n    newParent.children[newFilename] = oldParent.children[oldFilename]!\n    delete oldParent.children[oldFilename]\n  }\n\n  rmdir(path: string): void {\n    this.#tryWithWAL({ opp: 'rmdir', args: [path] }, () => {\n      this._rmdirState(path)\n    })\n  }\n\n  _rmdirState(path: string): void {\n    const pathParts = this.#pathParts(path)\n    const dirName = pathParts.pop()!\n    const parent = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n    if (!Object.prototype.hasOwnProperty.call(parent.children, dirName)) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    const node = parent.children[dirName]!\n    if (node.type !== 'directory') {\n      throw new FsError('ENOTDIR', 'Not a directory')\n    }\n    if (Object.keys(node.children).length > 0) {\n      throw new FsError('ENOTEMPTY', 'Directory not empty')\n    }\n    delete parent.children[dirName]\n  }\n\n  truncate(path: string, len = 0): void {\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const sh = this.#sh.get(node.backingFilename)\n    if (!sh) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    sh.truncate(len)\n    this.#unsyncedSH.add(sh)\n  }\n\n  unlink(path: string): void {\n    this.#tryWithWAL({ opp: 'unlink', args: [path] }, () => {\n      this._unlinkState(path, true)\n    })\n  }\n\n  _unlinkState(path: string, doFileOps = false): void {\n    const pathParts = this.#pathParts(path)\n    const filename = pathParts.pop()!\n    const dir = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n    if (!Object.prototype.hasOwnProperty.call(dir.children, filename)) {\n      throw new FsError('ENOENT', 'No such file or directory')\n    }\n    const node = dir.children[filename]!\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    delete dir.children[filename]\n    if (doFileOps) {\n      const sh = this.#sh.get(node.backingFilename)!\n      // We don't delete the file, it's truncated and returned to the pool\n      sh?.truncate(0)\n      this.#unsyncedSH.add(sh)\n      if (this.#openHandleIds.has(path)) {\n        this.#openHandlePaths.delete(this.#openHandleIds.get(path)!)\n        this.#openHandleIds.delete(path)\n      }\n    }\n    this.state.pool.push(node.backingFilename)\n  }\n\n  utimes(path: string, atime: number, mtime: number): void {\n    this.#tryWithWAL({ opp: 'utimes', args: [path, atime, mtime] }, () => {\n      this._utimesState(path, atime, mtime)\n    })\n  }\n\n  _utimesState(path: string, _atime: number, mtime: number): void {\n    const node = this.#resolvePath(path)\n    node.lastModified = mtime\n  }\n\n  writeFile(\n    path: string,\n    data: string | Int8Array,\n    options?: { encoding?: string; mode?: number; flag?: string },\n  ): void {\n    const pathParts = this.#pathParts(path)\n    const filename = pathParts.pop()!\n    const parent = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n\n    if (!Object.prototype.hasOwnProperty.call(parent.children, filename)) {\n      if (this.state.pool.length === 0) {\n        throw new Error('No more file handles available in the pool')\n      }\n      const node: Node = {\n        type: 'file',\n        lastModified: Date.now(),\n        mode: options?.mode || INITIAL_MODE.FILE,\n        backingFilename: this.state.pool.pop()!,\n      }\n      parent.children[filename] = node\n      this.#logWAL({\n        opp: 'createFileNode',\n        args: [path, node],\n      })\n    } else {\n      const node = parent.children[filename] as FileNode\n      node.lastModified = Date.now()\n      this.#logWAL({\n        opp: 'setLastModified',\n        args: [path, node.lastModified],\n      })\n    }\n    const node = parent.children[filename] as FileNode\n    const sh = this.#sh.get(node.backingFilename)!\n    // Files in pool are empty, only write if data is provided\n    if (data.length > 0) {\n      sh.write(\n        typeof data === 'string'\n          ? new TextEncoder().encode(data)\n          : new Int8Array(data),\n        { at: 0 },\n      )\n      if (path.startsWith('/pg_wal')) {\n        this.#unsyncedSH.add(sh)\n      }\n    }\n  }\n\n  _createFileNodeState(path: string, node: FileNode): FileNode {\n    const pathParts = this.#pathParts(path)\n    const filename = pathParts.pop()!\n    const parent = this.#resolvePath(pathParts.join('/')) as DirectoryNode\n    parent.children[filename] = node\n    // remove backingFilename from pool\n    const index = this.state.pool.indexOf(node.backingFilename)\n    if (index > -1) {\n      this.state.pool.splice(index, 1)\n    }\n    return node\n  }\n\n  _setLastModifiedState(path: string, lastModified: number): void {\n    const node = this.#resolvePath(path)\n    node.lastModified = lastModified\n  }\n\n  write(\n    fd: number,\n    buffer: Int8Array, // Buffer to read from\n    offset: number, // Offset in buffer to start reading from\n    length: number, // Number of bytes to write\n    position: number, // Position in file to write to\n  ): number {\n    const path = this.#getPathFromFd(fd)\n    const node = this.#resolvePath(path)\n    if (node.type !== 'file') {\n      throw new FsError('EISDIR', 'Is a directory')\n    }\n    const sh = this.#sh.get(node.backingFilename)\n    if (!sh) {\n      throw new FsError('EBADF', 'Bad file descriptor')\n    }\n    const ret = sh.write(new Int8Array(buffer, offset, length), {\n      at: position,\n    })\n    if (path.startsWith('/pg_wal')) {\n      this.#unsyncedSH.add(sh)\n    }\n    return ret\n  }\n\n  // Internal methods:\n\n  #tryWithWAL(entry: WALEntry, fn: () => void) {\n    const offset = this.#logWAL(entry)\n    try {\n      fn()\n    } catch (e) {\n      // Rollback WAL entry\n      this.#stateSH.truncate(offset)\n      throw e\n    }\n  }\n\n  #logWAL(entry: WALEntry) {\n    const entryJSON = JSON.stringify(entry)\n    const stateAB = new TextEncoder().encode(`\\n${entryJSON}`)\n    const offset = this.#stateSH.getSize()\n    this.#stateSH.write(stateAB, { at: offset })\n    this.#unsyncedSH.add(this.#stateSH)\n    return offset\n  }\n\n  #pathParts(path: string): string[] {\n    return path.split('/').filter(Boolean)\n  }\n\n  #resolvePath(path: string, from?: DirectoryNode): Node {\n    const parts = this.#pathParts(path)\n    let node: Node = from || this.state.root\n    for (const part of parts) {\n      if (node.type !== 'directory') {\n        throw new FsError('ENOTDIR', 'Not a directory')\n      }\n      if (!Object.prototype.hasOwnProperty.call(node.children, part)) {\n        throw new FsError('ENOENT', 'No such file or directory')\n      }\n      node = node.children[part]!\n    }\n    return node\n  }\n\n  #getPathFromFd(fd: number): string {\n    const path = this.#openHandlePaths.get(fd)\n    if (!path) {\n      throw new FsError('EBADF', 'Bad file descriptor')\n    }\n    return path\n  }\n\n  #nextHandleId(): number {\n    const id = ++this.#handleIdCounter\n    while (this.#openHandlePaths.has(id)) {\n      this.#handleIdCounter++\n    }\n    return id\n  }\n\n  async #resolveOpfsDirectory(\n    path: string,\n    options?: {\n      from?: FileSystemDirectoryHandle\n      create?: boolean\n    },\n  ): Promise<FileSystemDirectoryHandle> {\n    const parts = this.#pathParts(path)\n    let ah = options?.from || this.#opfsRootAh\n    for (const part of parts) {\n      ah = await ah.getDirectoryHandle(part, { create: options?.create })\n    }\n    return ah\n  }\n}\n"],"names":["O","B","EBADF","EBADFD","EEXIST","EINVAL","EISDIR","ENODEV","ENOENT","ENOTDIR","ENOTEMPTY","m","_Error","_inherits","_super","_createSuper","t","r","_this","_classCallCheck","call","code","_createClass","_wrapNativeSuper","Error","G","A","FS","i","tryFSOperation","e","n","ErrnoError","mount","createNode","syncfs","o","c","isDir","isFile","l","node_ops","stream_ops","getMode","lstat","mode","realPath","parent","push","name","opts","root","reverse","join","getattr","_objectSpread","dev","ino","id","nlink","rdev","atime","Date","mtime","ctime","setattr","chmod","size","truncate","timestamp","utimes","lookup","mknod","h","mkdir","writeFile","rename","unlink","_unused","rmdir","readdir","symlink","readlink","open","node","shared","refcount","nfd","close","dup","read","write","buffer","llseek","position","fstat","mmap","mmapAlloc","HEAP8","ptr","allocated","msync","M","x","_","v","H","y","N","S","j","E","k","b","a","K","D","I","w","f","T","Q","$","V","X","_ref","initialPoolSize","maintainedPoolSize","u","Map","lastCheckpoint","checkpointInterval","poolCounter","Set","this","readyPromise","d","key","get","s","value","_maintainPool","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","_e","_this2","wrap","_context3","prev","next","state","pool","length","Promise","_ref2","_callee","_context","concat","now","toString","padStart","getFileHandle","create","sent","createSyncAccessHandle","set","opp","args","stop","_x2","apply","arguments","_ref3","_callee2","_s$get","_context2","pop","remove","then","delete","_x3","all","_x","indexOf","splice","_maybeCheckpointState","_callee4","_context4","t0","checkpointState","_checkpointState","_callee5","_context5","TextEncoder","encode","JSON","stringify","at","flush","_step","_iterator","_createForOfIteratorHelper","done","_unused2","err","clear","_step2","_iterator2","values","_this3","_chmodState","type","backingFilename","getSize","uid","gid","blksize","blocks","Math","ceil","lastModified","_this4","_mkdirState","_step3","_iterator3","Object","prototype","hasOwnProperty","children","recursive","keys","Int8Array","_this5","_renameState","undefined","g","_this6","_rmdirState","add","_this7","_unlinkState","has","_this8","_utimesState","startsWith","_create","_callee6","_context6","abrupt","_x4","WeakMap","WeakSet","_ref4","_callee9","_iterator4","_step4","_iterator5","_step5","_loop","_this9","_context10","F","t1","t2","navigator","storage","getDirectory","t3","t4","t5","t6","t7","t8","t9","t10","from","t11","t12","t13","t14","t15","t16","t17","t18","t19","ArrayBuffer","TextDecoder","decode","split","parse","_unused3","slice","filter","Boolean","map","bind","_toConsumableArray","P","console","warn","_ref5","_callee7","_i","_Object$values","_g","_context7","error","_x5","_context9","_ref6","_callee8","ee","_context8","_x6","delegateYield","t21","finish","maintainPool","_step6","_iterator6","C","_ref7","_callee10","_iterator7","_step7","_context11","getDirectoryHandle","_x7","_x8","z","R","L","Z","_Y","_super2","_this10","_ref8","_assertThisInitialized","_emscriptenOpts","_callee11","_this11","_context12","dataDir","opfsAhp","preRun","W","_x9","_syncToFs","_callee12","_this$opfsAhp","_this$opfsAhp2","_this$opfsAhp3","_args13","_context13","maybeCheckpointState","_x10","_dumpTar","_callee13","_context14","q","_x11","_x12","_x13","_close","_callee14","_this$opfsAhp4","_context15","exit","quit","_x14","Y"],"sourceRoot":""}